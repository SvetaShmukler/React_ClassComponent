{"ast":null,"code":"var _jsxFileName = \"/Users/Sveta/Documents/Full_stack/REACT/ProjectReactClasses/src/Components/User - Components/otherData.js\";\nimport { Component } from \"react\";\nimport { GetUserData } from \"../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class OtherData extends Component {\n  constructor() {\n    super();\n\n    this.handleChange = e => {\n      const {\n        value\n      } = e.target;\n      this.setState({\n        [e.target.name]: value,\n        checkUpdated: true\n      });\n    };\n\n    this.state = {\n      street: \"\",\n      city: \"\",\n      zip: \"\",\n      id: \"\",\n      checkUpdated: false\n    };\n  }\n  /* Every diff user gets his details */\n\n\n  async componentDidUpdate() {\n    if (this.state.id != this.props.id) {\n      const data = await GetUserData(this.props.array, this.props.id);\n      this.setState({\n        id: this.props.id,\n        street: data.street,\n        city: data.city,\n        zip: data.zip\n      });\n    }\n    /* Checking if there was change on the inputs and sending it to the user */\n\n\n    if (this.state.checkUpdated) {\n      const updatedUser = {\n        street: this.state.street,\n        city: this.state.city,\n        zipcode: this.state.zip\n      };\n      this.props.callback(updatedUser);\n      this.setState({\n        checkUpdated: false\n      });\n    }\n  }\n  /* Changing the states on change of the inputs */\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: this.props.class,\n      id: \"otherdata-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Street:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"street\",\n          value: this.state.street,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"City:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"city\",\n          value: this.state.city,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Zip Code:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"zip\",\n          value: this.state.zip,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 16\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/Sveta/Documents/Full_stack/REACT/ProjectReactClasses/src/Components/User - Components/otherData.js"],"names":["Component","GetUserData","OtherData","constructor","handleChange","e","value","target","setState","name","checkUpdated","state","street","city","zip","id","componentDidUpdate","props","data","array","updatedUser","zipcode","callback","render","class"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,QAA4B,UAA5B;;AAEA,eAAe,MAAMC,SAAN,SAAwBF,SAAxB,CACf;AACIG,EAAAA,WAAW,GACX;AACI;;AADJ,SA0BAC,YA1BA,GA0BgBC,CAAD,IACf;AACI,YAAM;AAACC,QAAAA;AAAD,UAAUD,CAAC,CAACE,MAAlB;AACA,WAAKC,QAAL,CAAc;AAAC,SAACH,CAAC,CAACE,MAAF,CAASE,IAAV,GAAgBH,KAAjB;AAAyBI,QAAAA,YAAY,EAAC;AAAtC,OAAd;AACH,KA9BD;;AAEI,SAAKC,KAAL,GAAa;AAACC,MAAAA,MAAM,EAAC,EAAR;AAAWC,MAAAA,IAAI,EAAC,EAAhB;AAAmBC,MAAAA,GAAG,EAAC,EAAvB;AAA0BC,MAAAA,EAAE,EAAC,EAA7B;AAAgCL,MAAAA,YAAY,EAAC;AAA7C,KAAb;AACH;AACD;;;AACwB,QAAlBM,kBAAkB,GACxB;AACI,QAAG,KAAKL,KAAL,CAAWI,EAAX,IAAiB,KAAKE,KAAL,CAAWF,EAA/B,EACA;AACI,YAAMG,IAAI,GAAG,MAAMjB,WAAW,CAAC,KAAKgB,KAAL,CAAWE,KAAZ,EAAkB,KAAKF,KAAL,CAAWF,EAA7B,CAA9B;AACA,WAAKP,QAAL,CAAc;AAACO,QAAAA,EAAE,EAAC,KAAKE,KAAL,CAAWF,EAAf;AAAkBH,QAAAA,MAAM,EAACM,IAAI,CAACN,MAA9B;AAAqCC,QAAAA,IAAI,EAACK,IAAI,CAACL,IAA/C;AAAoDC,QAAAA,GAAG,EAACI,IAAI,CAACJ;AAA7D,OAAd;AACH;AACD;;;AACA,QAAG,KAAKH,KAAL,CAAWD,YAAd,EACA;AACI,YAAMU,WAAW,GAAE;AACfR,QAAAA,MAAM,EAAC,KAAKD,KAAL,CAAWC,MADH;AAEfC,QAAAA,IAAI,EAAC,KAAKF,KAAL,CAAWE,IAFD;AAGfQ,QAAAA,OAAO,EAAC,KAAKV,KAAL,CAAWG;AAHJ,OAAnB;AAMA,WAAKG,KAAL,CAAWK,QAAX,CAAoBF,WAApB;AACA,WAAKZ,QAAL,CAAc;AAACE,QAAAA,YAAY,EAAC;AAAd,OAAd;AACH;AACJ;AACD;;;AAOAa,EAAAA,MAAM,GACN;AACI,wBAAO;AAAK,MAAA,SAAS,EAAE,KAAKN,KAAL,CAAWO,KAA3B;AAAkC,MAAA,EAAE,EAAC,qBAArC;AAAA,8BAEH;AAAA,2CAEI;AAAO,UAAA,IAAI,EAAE,MAAb;AAAoB,UAAA,IAAI,EAAC,QAAzB;AAAmC,UAAA,KAAK,EAAE,KAAKb,KAAL,CAAWC,MAArD;AAA6D,UAAA,QAAQ,EAAE,KAAKR;AAA5E;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFG,eAMH;AAAA,yCAEI;AAAO,UAAA,IAAI,EAAE,MAAb;AAAoB,UAAA,IAAI,EAAC,MAAzB;AAAgC,UAAA,KAAK,EAAE,KAAKO,KAAL,CAAWE,IAAlD;AAAwD,UAAA,QAAQ,EAAE,KAAKT;AAAvE;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cANG,eAUH;AAAA,6CAEI;AAAO,UAAA,IAAI,EAAE,MAAb;AAAoB,UAAA,IAAI,EAAC,KAAzB;AAA+B,UAAA,KAAK,EAAE,KAAKO,KAAL,CAAWG,GAAjD;AAAsD,UAAA,QAAQ,EAAE,KAAKV;AAArE;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAVG;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAgBH;;AApDL","sourcesContent":["import { Component } from \"react\";\r\nimport { GetUserData } from \"../utils\";\r\n\r\nexport default class OtherData extends Component\r\n{\r\n    constructor()\r\n    {\r\n        super();\r\n        this.state = {street:\"\",city:\"\",zip:\"\",id:\"\",checkUpdated:false}\r\n    }\r\n    /* Every diff user gets his details */\r\n    async componentDidUpdate()\r\n    {\r\n        if(this.state.id != this.props.id)\r\n        {\r\n            const data = await GetUserData(this.props.array,this.props.id);\r\n            this.setState({id:this.props.id,street:data.street,city:data.city,zip:data.zip});\r\n        }\r\n        /* Checking if there was change on the inputs and sending it to the user */\r\n        if(this.state.checkUpdated)\r\n        {\r\n            const updatedUser ={\r\n                street:this.state.street,\r\n                city:this.state.city,\r\n                zipcode:this.state.zip\r\n            }\r\n\r\n            this.props.callback(updatedUser);\r\n            this.setState({checkUpdated:false})\r\n        }\r\n    }\r\n    /* Changing the states on change of the inputs */\r\n    handleChange = (e) =>\r\n    {\r\n        const {value} = e.target;\r\n        this.setState({[e.target.name]:value , checkUpdated:true})\r\n    }\r\n\r\n    render()\r\n    {\r\n        return(<div className={this.props.class} id=\"otherdata-container\">\r\n\r\n            <div>\r\n                Street:\r\n                <input type =\"text\" name=\"street\"  value={this.state.street} onChange={this.handleChange}/>\r\n            </div>\r\n            <div>\r\n                City:\r\n                <input type =\"text\" name=\"city\" value={this.state.city} onChange={this.handleChange}/>\r\n            </div>\r\n            <div>\r\n                Zip Code:\r\n                <input type =\"text\" name=\"zip\" value={this.state.zip} onChange={this.handleChange}/>\r\n            </div>\r\n\r\n        </div>)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}