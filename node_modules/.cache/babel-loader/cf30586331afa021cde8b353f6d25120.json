{"ast":null,"code":"import { getPostsByUserID } from \"./DALposts\";\nimport { getTodosByUserID } from \"./DALtodos\";\nimport { getAllUsers, getUserByID } from \"./DALusers\";\n\nconst GetAllUsers = () => getAllUsers(); //getting all users.\n\n\n_c = GetAllUsers;\n\nconst GetUserByID = (id, UserArr) => getUserByID(id, UserArr); //get user by id.\n\n\n_c2 = GetUserByID;\n\nconst GetUsersTodos = (id, todosArr) => getTodosByUserID(id, todosArr); //get user's todos by it's ID.\n\n\n_c3 = GetUsersTodos;\n\nconst GetUsersPosts = (id, postsArr) => getPostsByUserID(id, postsArr); //get user's posts by it's ID.\n//Checking if all of the todos of the user are completed:\n\n\n_c4 = GetUsersPosts;\n\nconst CheckIfCompleted = async (user, todosArr) => {\n  const todos = await GetUsersTodos(user.id, todosArr);\n  let check = true;\n  if (todos.length === 0) return false;\n  todos.forEach(todo => {\n    if (!todo.completed) check = false;\n  });\n  return check;\n};\n\n_c5 = CheckIfCompleted;\n\nconst Search = async (str, users) => {\n  // This function is searching for the clients input in all the names and email in the users data.\n  const string = str.toUpperCase();\n  return users.filter(user => user.name.toUpperCase().includes(string) || user.email.toUpperCase().includes(string));\n};\n\n_c6 = Search;\n\nconst getAddress = async (id, usersArray) => {\n  //This function gets the user's address.\n  const user = await GetUserByID(id, usersArray);\n  return user.address;\n};\n\nconst UpdateUser = (usersArr, NewUser) => {\n  //This function updates the user in the local array.\n  const index = usersArr.findIndex(user => user.id === NewUser.id);\n  usersArr.splice(index, 1, NewUser);\n  return usersArr;\n};\n\n_c7 = UpdateUser;\n\nconst AddNewUser = (newUser, usersArr) => {\n  //This function adding the new user to the local array and generates for it a new id.\n  const lastId = usersArr[usersArr.length - 1].id;\n  const user = {\n    id: lastId + 1,\n    ...newUser,\n    address: {\n      street: '',\n      city: '',\n      zipcode: ''\n    }\n  };\n  const newArray = [...usersArr, user];\n  return newArray;\n};\n\n_c8 = AddNewUser;\n\nconst DeleteUser = (id, usersArr) => {\n  // This function deletes a user from the local array.\n  const userIndex = usersArr.findIndex(user => user.id === id);\n  usersArr.splice(userIndex, 1);\n  return usersArr;\n};\n\n_c9 = DeleteUser;\n\nconst GetTodosById = async (id, todosArr) => {\n  //This function gets the todos of a specific user.\n  const todos = await GetUsersTodos(id, todosArr);\n  return todos;\n};\n\n_c10 = GetTodosById;\n\nconst GetPostsById = async (id, postsArr) => {\n  //This function gets the posts of a specific user.\n  const posts = await GetUsersPosts(id, postsArr);\n  return posts;\n};\n\n_c11 = GetPostsById;\n\nconst CompleteTodo = (id, todosArr) => {\n  // This function completes a todo and updates it in the local array.\n  const todo = todosArr.filter(todo => todo.id === id);\n  const index = todosArr.findIndex(todo => todo.id === id);\n  let Finaltodo = todo[0];\n  Finaltodo.completed = true;\n  todosArr.splice(index, 1, Finaltodo);\n  return todosArr;\n};\n\n_c12 = CompleteTodo;\n\nconst AddPost = (title, body, userId, postsArr) => {\n  // This function adding a post to the local array and generates for it an ID\n  let arr = postsArr.filter(post => post.userId === userId);\n  let finalIndex = arr[arr.length - 1].id + 1;\n  const newPost = {\n    title: title,\n    body: body,\n    userId: userId\n  };\n  postsArr.splice(finalIndex, 0, newPost);\n  return postsArr;\n};\n\n_c13 = AddPost;\n\nconst AddTodo = (title, userId, todosArr) => {\n  // This function adding a todo to the local array and generates for it an ID\n  let arr = todosArr.filter(todo => todo.userId === userId);\n  let finalIndex = arr[arr.length - 1].id;\n  console.log(finalIndex);\n  const newTodo = {\n    userId: userId,\n    id: finalIndex + 1,\n    title: title,\n    completed: false\n  };\n  todosArr.splice(finalIndex, 0, newTodo);\n  console.log(todosArr);\n  return todosArr;\n};\n\n_c14 = AddTodo;\nexport { GetAllUsers, GetUserByID, CheckIfCompleted, Search, getAddress, UpdateUser, AddNewUser, DeleteUser, GetTodosById, GetPostsById, CompleteTodo, AddPost, AddTodo };\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14;\n\n$RefreshReg$(_c, \"GetAllUsers\");\n$RefreshReg$(_c2, \"GetUserByID\");\n$RefreshReg$(_c3, \"GetUsersTodos\");\n$RefreshReg$(_c4, \"GetUsersPosts\");\n$RefreshReg$(_c5, \"CheckIfCompleted\");\n$RefreshReg$(_c6, \"Search\");\n$RefreshReg$(_c7, \"UpdateUser\");\n$RefreshReg$(_c8, \"AddNewUser\");\n$RefreshReg$(_c9, \"DeleteUser\");\n$RefreshReg$(_c10, \"GetTodosById\");\n$RefreshReg$(_c11, \"GetPostsById\");\n$RefreshReg$(_c12, \"CompleteTodo\");\n$RefreshReg$(_c13, \"AddPost\");\n$RefreshReg$(_c14, \"AddTodo\");","map":{"version":3,"sources":["/Users/Sveta/Documents/Full_stack/REACT/Project_React_Classes/src/Components/Utils.js"],"names":["getPostsByUserID","getTodosByUserID","getAllUsers","getUserByID","GetAllUsers","GetUserByID","id","UserArr","GetUsersTodos","todosArr","GetUsersPosts","postsArr","CheckIfCompleted","user","todos","check","length","forEach","todo","completed","Search","str","users","string","toUpperCase","filter","name","includes","email","getAddress","usersArray","address","UpdateUser","usersArr","NewUser","index","findIndex","splice","AddNewUser","newUser","lastId","street","city","zipcode","newArray","DeleteUser","userIndex","GetTodosById","GetPostsById","posts","CompleteTodo","Finaltodo","AddPost","title","body","userId","arr","post","finalIndex","newPost","AddTodo","console","log","newTodo"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,YAAjC;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,YAAzC;;AAEA,MAAMC,WAAW,GAAG,MAAMF,WAAW,EAArC,C,CAAuC;;;KAAjCE,W;;AACN,MAAMC,WAAW,GAAG,CAACC,EAAD,EAAKC,OAAL,KAAiBJ,WAAW,CAACG,EAAD,EAAKC,OAAL,CAAhD,C,CAA6D;;;MAAvDF,W;;AACN,MAAMG,aAAa,GAAG,CAACF,EAAD,EAAKG,QAAL,KAAkBR,gBAAgB,CAACK,EAAD,EAAKG,QAAL,CAAxD,C,CAAsE;;;MAAhED,a;;AACN,MAAME,aAAa,GAAG,CAACJ,EAAD,EAAKK,QAAL,KAAkBX,gBAAgB,CAACM,EAAD,EAAKK,QAAL,CAAxD,C,CAAsE;AAEtE;;;MAFMD,a;;AAGN,MAAME,gBAAgB,GAAG,OAAOC,IAAP,EAAaJ,QAAb,KACzB;AACI,QAAMK,KAAK,GAAG,MAAMN,aAAa,CAACK,IAAI,CAACP,EAAN,EAAUG,QAAV,CAAjC;AACA,MAAIM,KAAK,GAAG,IAAZ;AACA,MAAID,KAAK,CAACE,MAAN,KAAiB,CAArB,EACI,OAAO,KAAP;AACJF,EAAAA,KAAK,CAACG,OAAN,CAAcC,IAAI,IAAI;AAClB,QAAI,CAACA,IAAI,CAACC,SAAV,EACIJ,KAAK,GAAG,KAAR;AACP,GAHD;AAIA,SAAOA,KAAP;AACH,CAXD;;MAAMH,gB;;AAYN,MAAMQ,MAAM,GAAG,OAAOC,GAAP,EAAYC,KAAZ,KAAsB;AAAC;AAClC,QAAMC,MAAM,GAAGF,GAAG,CAACG,WAAJ,EAAf;AACA,SAAOF,KAAK,CAACG,MAAN,CAAcZ,IAAD,IAAYA,IAAI,CAACa,IAAL,CAAUF,WAAV,GAAwBG,QAAxB,CAAiCJ,MAAjC,CAAD,IAA+CV,IAAI,CAACe,KAAL,CAAWJ,WAAX,GAAyBG,QAAzB,CAAkCJ,MAAlC,CAAvE,CAAP;AACH,CAHD;;MAAMH,M;;AAIN,MAAMS,UAAU,GAAG,OAAOvB,EAAP,EAAWwB,UAAX,KAA0B;AAAE;AAC3C,QAAMjB,IAAI,GAAG,MAAMR,WAAW,CAACC,EAAD,EAAKwB,UAAL,CAA9B;AACA,SAAOjB,IAAI,CAACkB,OAAZ;AACH,CAHD;;AAIA,MAAMC,UAAU,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuB;AAAE;AACxC,QAAMC,KAAK,GAAGF,QAAQ,CAACG,SAAT,CAAoBvB,IAAD,IAAUA,IAAI,CAACP,EAAL,KAAY4B,OAAO,CAAC5B,EAAjD,CAAd;AACA2B,EAAAA,QAAQ,CAACI,MAAT,CAAgBF,KAAhB,EAAuB,CAAvB,EAA0BD,OAA1B;AACA,SAAOD,QAAP;AACH,CAJD;;MAAMD,U;;AAKN,MAAMM,UAAU,GAAG,CAACC,OAAD,EAAUN,QAAV,KAAuB;AAAC;AACvC,QAAMO,MAAM,GAAGP,QAAQ,CAACA,QAAQ,CAACjB,MAAT,GAAkB,CAAnB,CAAR,CAA8BV,EAA7C;AACA,QAAMO,IAAI,GAAG;AAAEP,IAAAA,EAAE,EAAEkC,MAAM,GAAG,CAAf;AAAkB,OAAGD,OAArB;AAA8BR,IAAAA,OAAO,EAAE;AAAEU,MAAAA,MAAM,EAAE,EAAV;AAAcC,MAAAA,IAAI,EAAE,EAApB;AAAwBC,MAAAA,OAAO,EAAE;AAAjC;AAAvC,GAAb;AACA,QAAMC,QAAQ,GAAG,CAAC,GAAGX,QAAJ,EAAcpB,IAAd,CAAjB;AACA,SAAO+B,QAAP;AACH,CALD;;MAAMN,U;;AAMN,MAAMO,UAAU,GAAG,CAACvC,EAAD,EAAK2B,QAAL,KAAkB;AAAC;AAClC,QAAMa,SAAS,GAAGb,QAAQ,CAACG,SAAT,CAAoBvB,IAAD,IAAUA,IAAI,CAACP,EAAL,KAAYA,EAAzC,CAAlB;AACA2B,EAAAA,QAAQ,CAACI,MAAT,CAAgBS,SAAhB,EAA2B,CAA3B;AACA,SAAOb,QAAP;AACH,CAJD;;MAAMY,U;;AAKN,MAAME,YAAY,GAAG,OAAOzC,EAAP,EAAWG,QAAX,KAAwB;AAAE;AAC3C,QAAMK,KAAK,GAAG,MAAMN,aAAa,CAACF,EAAD,EAAKG,QAAL,CAAjC;AACA,SAAOK,KAAP;AACH,CAHD;;OAAMiC,Y;;AAIN,MAAMC,YAAY,GAAG,OAAO1C,EAAP,EAAWK,QAAX,KAAwB;AAAE;AAC3C,QAAMsC,KAAK,GAAG,MAAMvC,aAAa,CAACJ,EAAD,EAAKK,QAAL,CAAjC;AACA,SAAOsC,KAAP;AACH,CAHD;;OAAMD,Y;;AAIN,MAAME,YAAY,GAAG,CAAC5C,EAAD,EAAKG,QAAL,KAAkB;AAAE;AACrC,QAAMS,IAAI,GAAGT,QAAQ,CAACgB,MAAT,CAAiBP,IAAD,IAAUA,IAAI,CAACZ,EAAL,KAAYA,EAAtC,CAAb;AACA,QAAM6B,KAAK,GAAG1B,QAAQ,CAAC2B,SAAT,CAAoBlB,IAAD,IAAUA,IAAI,CAACZ,EAAL,KAAYA,EAAzC,CAAd;AACA,MAAI6C,SAAS,GAAGjC,IAAI,CAAC,CAAD,CAApB;AACAiC,EAAAA,SAAS,CAAChC,SAAV,GAAsB,IAAtB;AACAV,EAAAA,QAAQ,CAAC4B,MAAT,CAAgBF,KAAhB,EAAuB,CAAvB,EAA0BgB,SAA1B;AACA,SAAO1C,QAAP;AACH,CAPD;;OAAMyC,Y;;AAQN,MAAME,OAAO,GAAG,CAACC,KAAD,EAAQC,IAAR,EAAcC,MAAd,EAAsB5C,QAAtB,KAAmC;AAAE;AACjD,MAAI6C,GAAG,GAAG7C,QAAQ,CAACc,MAAT,CAAiBgC,IAAD,IAAUA,IAAI,CAACF,MAAL,KAAgBA,MAA1C,CAAV;AACA,MAAIG,UAAU,GAAGF,GAAG,CAACA,GAAG,CAACxC,MAAJ,GAAa,CAAd,CAAH,CAAoBV,EAApB,GAAyB,CAA1C;AACA,QAAMqD,OAAO,GAAG;AAAEN,IAAAA,KAAK,EAAEA,KAAT;AAAgBC,IAAAA,IAAI,EAAEA,IAAtB;AAA4BC,IAAAA,MAAM,EAAEA;AAApC,GAAhB;AACA5C,EAAAA,QAAQ,CAAC0B,MAAT,CAAgBqB,UAAhB,EAA4B,CAA5B,EAA+BC,OAA/B;AACA,SAAOhD,QAAP;AACH,CAND;;OAAMyC,O;;AAON,MAAMQ,OAAO,GAAG,CAACP,KAAD,EAAQE,MAAR,EAAgB9C,QAAhB,KAA6B;AAAE;AAC3C,MAAI+C,GAAG,GAAG/C,QAAQ,CAACgB,MAAT,CAAiBP,IAAD,IAAUA,IAAI,CAACqC,MAAL,KAAgBA,MAA1C,CAAV;AACA,MAAIG,UAAU,GAAGF,GAAG,CAACA,GAAG,CAACxC,MAAJ,GAAa,CAAd,CAAH,CAAoBV,EAArC;AACAuD,EAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAZ;AACA,QAAMK,OAAO,GAAG;AAAER,IAAAA,MAAM,EAAEA,MAAV;AAAkBjD,IAAAA,EAAE,EAAEoD,UAAU,GAAC,CAAjC;AAAoCL,IAAAA,KAAK,EAAEA,KAA3C;AAAkDlC,IAAAA,SAAS,EAAE;AAA7D,GAAhB;AACAV,EAAAA,QAAQ,CAAC4B,MAAT,CAAgBqB,UAAhB,EAA4B,CAA5B,EAA+BK,OAA/B;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAYrD,QAAZ;AACA,SAAOA,QAAP;AACH,CARD;;OAAMmD,O;AAUN,SAAQxD,WAAR,EAAoBC,WAApB,EAAgCO,gBAAhC,EAAiDQ,MAAjD,EAAwDS,UAAxD,EAAmEG,UAAnE,EAA8EM,UAA9E,EAAyFO,UAAzF,EAAoGE,YAApG,EAAiHC,YAAjH,EAA8HE,YAA9H,EAA2IE,OAA3I,EAAmJQ,OAAnJ","sourcesContent":["import { getPostsByUserID } from \"./DALposts\";\r\nimport { getTodosByUserID } from \"./DALtodos\";\r\nimport { getAllUsers, getUserByID } from \"./DALusers\";\r\n\r\nconst GetAllUsers = () => getAllUsers()//getting all users.\r\nconst GetUserByID = (id, UserArr) => getUserByID(id, UserArr)//get user by id.\r\nconst GetUsersTodos = (id, todosArr) => getTodosByUserID(id, todosArr)//get user's todos by it's ID.\r\nconst GetUsersPosts = (id, postsArr) => getPostsByUserID(id, postsArr)//get user's posts by it's ID.\r\n\r\n//Checking if all of the todos of the user are completed:\r\nconst CheckIfCompleted = async (user, todosArr) => \r\n{ \r\n    const todos = await GetUsersTodos(user.id, todosArr)\r\n    let check = true\r\n    if (todos.length === 0)\r\n        return false\r\n    todos.forEach(todo => {\r\n        if (!todo.completed)\r\n            check = false\r\n    });\r\n    return check\r\n}\r\nconst Search = async (str, users) => {// This function is searching for the clients input in all the names and email in the users data.\r\n    const string = str.toUpperCase()\r\n    return users.filter((user) => ((user.name.toUpperCase().includes(string)) || (user.email.toUpperCase().includes(string))));\r\n}\r\nconst getAddress = async (id, usersArray) => { //This function gets the user's address.\r\n    const user = await GetUserByID(id, usersArray);\r\n    return user.address;\r\n}\r\nconst UpdateUser = (usersArr, NewUser) => { //This function updates the user in the local array.\r\n    const index = usersArr.findIndex((user) => user.id === NewUser.id)\r\n    usersArr.splice(index, 1, NewUser)\r\n    return usersArr\r\n}\r\nconst AddNewUser = (newUser, usersArr) => {//This function adding the new user to the local array and generates for it a new id.\r\n    const lastId = usersArr[usersArr.length - 1].id\r\n    const user = { id: lastId + 1, ...newUser, address: { street: '', city: '', zipcode: '' } }\r\n    const newArray = [...usersArr, user]\r\n    return newArray\r\n}\r\nconst DeleteUser = (id, usersArr) => {// This function deletes a user from the local array.\r\n    const userIndex = usersArr.findIndex((user) => user.id === id);\r\n    usersArr.splice(userIndex, 1);\r\n    return usersArr;\r\n}\r\nconst GetTodosById = async (id, todosArr) => { //This function gets the todos of a specific user.\r\n    const todos = await GetUsersTodos(id, todosArr)\r\n    return todos\r\n}\r\nconst GetPostsById = async (id, postsArr) => { //This function gets the posts of a specific user.\r\n    const posts = await GetUsersPosts(id, postsArr)\r\n    return posts\r\n}\r\nconst CompleteTodo = (id, todosArr) => { // This function completes a todo and updates it in the local array.\r\n    const todo = todosArr.filter((todo) => todo.id === id)\r\n    const index = todosArr.findIndex((todo) => todo.id === id)\r\n    let Finaltodo = todo[0]\r\n    Finaltodo.completed = true\r\n    todosArr.splice(index, 1, Finaltodo)\r\n    return todosArr;\r\n}\r\nconst AddPost = (title, body, userId, postsArr) => { // This function adding a post to the local array and generates for it an ID\r\n    let arr = postsArr.filter((post) => post.userId === userId)\r\n    let finalIndex = arr[arr.length - 1].id + 1;\r\n    const newPost = { title: title, body: body, userId: userId }\r\n    postsArr.splice(finalIndex, 0, newPost)\r\n    return postsArr;\r\n}\r\nconst AddTodo = (title, userId, todosArr) => { // This function adding a todo to the local array and generates for it an ID\r\n    let arr = todosArr.filter((todo) => todo.userId === userId)\r\n    let finalIndex = arr[arr.length - 1].id;\r\n    console.log(finalIndex);\r\n    const newTodo = { userId: userId, id: finalIndex+1, title: title, completed: false }\r\n    todosArr.splice(finalIndex, 0, newTodo)\r\n    console.log(todosArr);\r\n    return todosArr;\r\n}\r\n\r\nexport {GetAllUsers,GetUserByID,CheckIfCompleted,Search,getAddress,UpdateUser,AddNewUser,DeleteUser,GetTodosById,GetPostsById,CompleteTodo,AddPost,AddTodo} "]},"metadata":{},"sourceType":"module"}