{"ast":null,"code":"var _jsxFileName = \"/Users/Sveta/Documents/Full_stack/REACT/Project_React_Classes/src/Components/userComp.js\";\nimport { CheckIfCompleted } from \"./Utils\";\nimport { Component } from \"react\";\nimport OtherData from \"./OtherDatComp\";\nimport './StyleSheet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class UserComp extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleUpdate = () => {\n      const user = { ...this.state.user,\n        address: this.state.address,\n        name: this.state.name,\n        email: this.state.email\n      };\n      this.props.callBack(user);\n    };\n\n    this.showTodosAndPosts = () => {\n      this.props.callback2(this.state.id);\n      this.props.show();\n    };\n\n    this.getOtherData = obj => this.setState({\n      address: obj\n    });\n\n    this.handleDelete = () => this.props.deleteFunc(this.props.user.id);\n\n    this.handleChange = e => this.setState({\n      [e.target.name]: e.target.value,\n      mountOrDelete: false\n    });\n\n    this.showOther = () => this.setState({\n      showOther: true\n    });\n\n    this.hideOther = () => this.setState({\n      showOther: false\n    });\n\n    this.state = {\n      name: '',\n      email: '',\n      id: '',\n      completed: false,\n      showOther: false,\n      pressed: false,\n      address: {},\n      user: {}\n    };\n  } //The component is loading the data of the user when it mounts:\n\n\n  componentDidMount() {\n    const user = { ...this.props.user\n    };\n    this.setState({\n      user: user,\n      id: user.id,\n      name: user.name,\n      email: user.email\n    });\n  }\n\n  async componentDidUpdate() {\n    const tempBool = await CheckIfCompleted(this.state.user, this.props.todosArr);\n    if (this.state.completed !== tempBool) // Checking if all the task are completed to color the border of the user div.\n      this.setState({\n        completed: tempBool\n      });\n    if (this.state.id !== this.props.user.id) // Refreshing the data if the userId was changed.\n      this.setState({\n        name: this.props.user.name,\n        email: this.props.user.email,\n        id: this.props.user.id\n      });\n    if (this.props.pressed === this.state.user.id && !this.state.pressed) //Checking if the ID label was pressed so it will color the user div in orange.\n      this.setState({\n        pressed: true\n      });else if (this.props.pressed !== this.state.user.id && this.state.pressed) //Checking if the ID label isn't pressed so it will color the user div back to light blue.\n      this.setState({\n        pressed: false\n      });\n  } // Sending a user to update in the main page:\n\n\n  //Hiding other data\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: this.state.completed ? \"userComplitedDiv\" : \"userUnComplitedDiv\",\n      style: {\n        backgroundColor: this.state.pressed ? '#f9b494' : null\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"IdTitle\",\n        onClick: this.showTodosAndPosts,\n        children: [\"ID:\", this.props.user.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), \"Name: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"nameinput\",\n        type: \"text\",\n        name: \"name\",\n        value: this.state.name,\n        onChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 127\n      }, this), \"Email: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"emailinput\",\n        type: \"text\",\n        name: \"email\",\n        value: this.state.email,\n        onChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 20\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 131\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"otherDataBtn\",\n        onMouseOver: this.showOther,\n        onClick: this.hideOther,\n        children: \"Other Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(OtherData, {\n        id: this.props.user.id,\n        show: this.state.showOther,\n        callBack: this.getOtherData,\n        userArray: this.props.usersArray\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"updateAndDelteBtn\",\n        onClick: this.handleUpdate,\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"updateAndDelteBtn\",\n        onClick: this.handleDelete,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/Sveta/Documents/Full_stack/REACT/Project_React_Classes/src/Components/userComp.js"],"names":["CheckIfCompleted","Component","OtherData","UserComp","constructor","props","handleUpdate","user","state","address","name","email","callBack","showTodosAndPosts","callback2","id","show","getOtherData","obj","setState","handleDelete","deleteFunc","handleChange","e","target","value","mountOrDelete","showOther","hideOther","completed","pressed","componentDidMount","componentDidUpdate","tempBool","todosArr","render","backgroundColor","usersArray"],"mappings":"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","sourcesContent":["import { CheckIfCompleted } from \"./Utils\";\r\nimport { Component } from \"react\";\r\nimport OtherData from \"./OtherDatComp\";\r\nimport './StyleSheet.css';\r\n\r\nexport default class UserComp extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            name: '',\r\n            email: '',\r\n            id: '',\r\n            completed: false,\r\n            showOther: false,\r\n            pressed: false,\r\n            address: {},\r\n            user:{}\r\n        }\r\n    }\r\n    //The component is loading the data of the user when it mounts:\r\n    componentDidMount() {\r\n        const user = { ...this.props.user }                                            \r\n        this.setState({ user: user, id: user.id, name: user.name, email: user.email })\r\n    }                                                                                \r\n\r\n    async componentDidUpdate() {\r\n        const tempBool = await CheckIfCompleted(this.state.user, this.props.todosArr)\r\n        if (this.state.completed !== tempBool)// Checking if all the task are completed to color the border of the user div.\r\n            this.setState({ completed: tempBool })\r\n        if ((this.state.id !== this.props.user.id))// Refreshing the data if the userId was changed.\r\n            this.setState({ name: this.props.user.name, email: this.props.user.email, id: this.props.user.id })\r\n        if ((this.props.pressed === this.state.user.id) && !this.state.pressed) //Checking if the ID label was pressed so it will color the user div in orange.\r\n            this.setState({ pressed: true })\r\n        else if ((this.props.pressed !== this.state.user.id) && this.state.pressed) //Checking if the ID label isn't pressed so it will color the user div back to light blue.\r\n            this.setState({ pressed: false })\r\n    }\r\n    // Sending a user to update in the main page:\r\n    handleUpdate = () => {\r\n        const user = { ...this.state.user, address: this.state.address, name: this.state.name, email: this.state.email }\r\n        this.props.callBack(user)\r\n    }                   \r\n    //Sending the ID to the main page so the correct todos & posts will be shown:\r\n    showTodosAndPosts = () => {\r\n        this.props.callback2(this.state.id)\r\n        this.props.show()                 \r\n    }\r\n    //Geting the address from the otherData component and saves it to the state:\r\n    getOtherData = (obj) => this.setState({ address: obj }) \r\n    \r\n    handleDelete = () => this.props.deleteFunc(this.props.user.id)// This function sending the id of the user that the client want to delete.\r\n    handleChange = (e) => this.setState({ [e.target.name]: e.target.value, mountOrDelete: false })// Handling clients inputs.\r\n    showOther = () => this.setState({ showOther: true })//Showing other data\r\n    hideOther = () => this.setState({ showOther: false })//Hiding other data\r\n\r\n    render() {\r\n        return (<div className={this.state.completed ? \"userComplitedDiv\" : \"userUnComplitedDiv\"} style={{ backgroundColor: this.state.pressed ? '#f9b494' : null }}>\r\n            <h2 className=\"IdTitle\" onClick={this.showTodosAndPosts}>ID:{this.props.user.id}</h2>\r\n            Name: <input className=\"nameinput\" type='text' name='name' value={this.state.name} onChange={this.handleChange} /><br />\r\n            Email: <input className=\"emailinput\" type='text' name='email' value={this.state.email} onChange={this.handleChange} /><br />\r\n            <button className=\"otherDataBtn\" onMouseOver={this.showOther} onClick={this.hideOther}>Other Data</button>\r\n            <OtherData id={this.props.user.id} show={this.state.showOther} callBack={this.getOtherData} userArray={this.props.usersArray} />\r\n            <button className=\"updateAndDelteBtn\" onClick={this.handleUpdate}>Update</button>\r\n            <button className=\"updateAndDelteBtn\" onClick={this.handleDelete}>Delete</button>\r\n        </div>)\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}