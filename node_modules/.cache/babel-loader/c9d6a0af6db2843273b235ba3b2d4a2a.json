{"ast":null,"code":"var _jsxFileName = \"/Users/Sveta/Documents/Full_stack/REACT/Project_React_Classes/src/Components/OtherDatComp.js\";\nimport { getAddress } from \"./Utils\";\nimport { Component } from \"react\";\nimport './StyleSheet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class OtherData extends Component {\n  constructor() {\n    super();\n\n    this.handleChange = e => this.setState({\n      [e.target.name]: e.target.value,\n      change: true\n    });\n\n    this.state = {\n      id: 0,\n      address: {},\n      street: '',\n      city: '',\n      zip: '',\n      change: false\n    };\n  } // The address is loading when component is mounted:\n\n\n  async componentDidMount() {\n    this.setState({\n      address: await getAddress(this.props.id, this.props.userArray)\n    });\n  } //If the useId was changed,when user deleted ---> getting the correct user address:\n\n\n  async componentDidUpdate() {\n    if (this.state.id !== this.props.id) {\n      this.setState({\n        address: await getAddress(this.props.id, this.props.userArray)\n      });\n      this.setState({\n        street: this.state.address.street,\n        city: this.state.address.city,\n        zip: this.state.address.zipcode,\n        id: this.props.id\n      });\n    }\n\n    if (this.state.change) {\n      //If there was a change in either of the inputs then update the address by using a callback function.\n      this.props.callBack({\n        street: this.state.street,\n        city: this.state.city,\n        zipcode: this.state.zip\n      });\n      this.setState({\n        change: false\n      });\n    }\n  } // Handling the inputs from the client. and trigering the update in the function above:\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: this.props.show ? 'otherDataShow' : 'otherDataHide',\n      children: [\"Street: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"userDataInput\",\n        type: \"text\",\n        name: \"street\",\n        value: this.state.street,\n        onChange: e => this.handleChange(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 147\n      }, this), \"City: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"userDataInput\",\n        type: \"text\",\n        name: \"city\",\n        value: this.state.city,\n        onChange: e => this.handleChange(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 141\n      }, this), \"Zip Code: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"userDataInput\",\n        type: \"text\",\n        name: \"zip\",\n        value: this.state.zip,\n        onChange: e => this.handleChange(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 143\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/Sveta/Documents/Full_stack/REACT/Project_React_Classes/src/Components/OtherDatComp.js"],"names":["getAddress","Component","OtherData","constructor","handleChange","e","setState","target","name","value","change","state","id","address","street","city","zip","componentDidMount","props","userArray","componentDidUpdate","zipcode","callBack","render","show"],"mappings":"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","sourcesContent":["import { getAddress } from \"./Utils\";\r\nimport { Component } from \"react\";\r\nimport './StyleSheet.css';\r\nexport default class OtherData extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            id: 0,\r\n            address: {},\r\n            street: '',\r\n            city: '',\r\n            zip: '',\r\n            change: false\r\n        }\r\n    }\r\n    // The address is loading when component is mounted:\r\n    async componentDidMount() \r\n    {                                                            \r\n        this.setState({ address: await getAddress(this.props.id, this.props.userArray) }) \r\n    } \r\n    \r\n    //If the useId was changed,when user deleted ---> getting the correct user address:\r\n    async componentDidUpdate() \r\n    {\r\n        if (this.state.id !== this.props.id) { \r\n            this.setState({ address: await getAddress(this.props.id, this.props.userArray) }) \r\n            this.setState({ street: this.state.address.street, city: this.state.address.city, zip: this.state.address.zipcode, id: this.props.id })\r\n        }\r\n        if (this.state.change) { \r\n        //If there was a change in either of the inputs then update the address by using a callback function.\r\n            this.props.callBack({ street: this.state.street, city: this.state.city, zipcode: this.state.zip })\r\n            this.setState({ change: false })\r\n        }\r\n    }\r\n    // Handling the inputs from the client. and trigering the update in the function above:\r\n    handleChange = (e) => this.setState({ [e.target.name]: e.target.value, change: true })\r\n\r\n    render() {\r\n        return (<div className={this.props.show ? 'otherDataShow' : 'otherDataHide'}>\r\n            Street: <input className=\"userDataInput\" type='text' name='street' value={this.state.street} onChange={(e) => this.handleChange(e)} /><br />\r\n            City: <input className=\"userDataInput\" type='text' name='city' value={this.state.city} onChange={(e) => this.handleChange(e)} /><br />\r\n            Zip Code: <input className=\"userDataInput\" type='text' name='zip' value={this.state.zip} onChange={(e) => this.handleChange(e)} /><br />\r\n        </div>)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}