{"ast":null,"code":"import { getAllPosts } from \"./DALS/postsDAL\";\nimport { getAllTodos } from \"./DALS/todosDAL\";\nimport { getAllUsers, getUserByID } from \"./DALS/usersDAL\";\n/* Get All Functions */\n\nexport const GetAllUsers = () => getAllUsers();\n_c = GetAllUsers;\nexport const GetAllPosts = () => getAllPosts();\n_c2 = GetAllPosts;\nexport const GetAllTodos = () => getAllTodos();\n/* Getss the user by Id object */\n\n_c3 = GetAllTodos;\nexport const GetUserById = id => getUserByID(id);\n/* Gets All Todos of the id*/\n\n_c4 = GetUserById;\nexport const GetAllTodosById = (todos, id) => {\n  return todos.filter(todo => todo.userId == id);\n};\n/* Gets All Posts of the id*/\n\n_c5 = GetAllTodosById;\nexport const GetAllPostsById = (posts, id) => {\n  return posts.filter(post => post.userId == id);\n};\n/* return Array with users that the user/email contain the string */\n\n_c6 = GetAllPostsById;\nexport const searchUsers = (usersArray, string) => {\n  return usersArray.filter(user => user.name.includes(string) || user.email.includes(string));\n};\n/* Finds the user by id and return address object */\n\nexport const GetUserData = (usersArray, id) => {\n  const user = usersArray.find(user => user.id == id);\n  return {\n    street: user.address.street,\n    city: user.address.city,\n    zip: user.address.zipcode\n  };\n};\n/* Updating user */\n\n_c7 = GetUserData;\nexport const UpdateUser = (usersArray, newUser) => {\n  /* Finds the user index */\n  const userIndex = FindUserIndex(usersArray, newUser.id);\n  usersArray[userIndex] = newUser;\n  /* replacing the old user with the new */\n\n  return usersArray;\n};\n/* Function that get Array and id and finds the index of the user in the array*/\n\n_c8 = UpdateUser;\nexport const FindUserIndex = (usersArray, id) => {\n  return usersArray.findIndex(user => user.id == id);\n};\n/* Checks if All the Tasks Are Completed return true if does*/\n\n_c9 = FindUserIndex;\nexport const CheckTodos = (id, todos) => {\n  const todosUser = GetAllTodosById(todos, id);\n  return todosUser.every(todo => todo.completed);\n};\n/* Basic Function Which adds to array new Object */\n\n_c10 = CheckTodos;\nexport const AddtoArray = (array, newObj) => {\n  array.push(newObj);\n  return array;\n};\n/* Adds new User to the Array */\n\n_c11 = AddtoArray;\nexport const AddUser = (array, newObj) => {\n  newObj.id = array[array.length - 1].id + 1;\n  /* The new User Gets the id of the last id user +1 */\n\n  return AddtoArray(array, newObj);\n};\n/* Basic Funtion which Removes Object from array */\n\n_c12 = AddUser;\nexport const RemoveFromArray = (array, idObj) => {\n  const objIndex = FindUserIndex(array, idObj);\n  array.splice(objIndex, 1);\n  return array;\n};\n/* Mark the Task by id as Completed */\n\n_c13 = RemoveFromArray;\nexport const MarkTaskComplete = (todosArray, idTask) => {\n  const todo = todosArray.findIndex(todo => todo.id == idTask);\n  todosArray[todo].completed = true;\n  return todosArray;\n};\n_c14 = MarkTaskComplete;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14;\n\n$RefreshReg$(_c, \"GetAllUsers\");\n$RefreshReg$(_c2, \"GetAllPosts\");\n$RefreshReg$(_c3, \"GetAllTodos\");\n$RefreshReg$(_c4, \"GetUserById\");\n$RefreshReg$(_c5, \"GetAllTodosById\");\n$RefreshReg$(_c6, \"GetAllPostsById\");\n$RefreshReg$(_c7, \"GetUserData\");\n$RefreshReg$(_c8, \"UpdateUser\");\n$RefreshReg$(_c9, \"FindUserIndex\");\n$RefreshReg$(_c10, \"CheckTodos\");\n$RefreshReg$(_c11, \"AddtoArray\");\n$RefreshReg$(_c12, \"AddUser\");\n$RefreshReg$(_c13, \"RemoveFromArray\");\n$RefreshReg$(_c14, \"MarkTaskComplete\");","map":{"version":3,"sources":["/Users/Sveta/Documents/Full_stack/REACT/ProjectReactClasses/src/Components/utils.js"],"names":["getAllPosts","getAllTodos","getAllUsers","getUserByID","GetAllUsers","GetAllPosts","GetAllTodos","GetUserById","id","GetAllTodosById","todos","filter","todo","userId","GetAllPostsById","posts","post","searchUsers","usersArray","string","user","name","includes","email","GetUserData","find","street","address","city","zip","zipcode","UpdateUser","newUser","userIndex","FindUserIndex","findIndex","CheckTodos","todosUser","every","completed","AddtoArray","array","newObj","push","AddUser","length","RemoveFromArray","idObj","objIndex","splice","MarkTaskComplete","todosArray","idTask"],"mappings":"AAAA,SAASA,WAAT,QAA4B,iBAA5B;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAwC,iBAAxC;AAEA;;AACA,OAAO,MAAMC,WAAW,GAAG,MAAMF,WAAW,EAArC;KAAME,W;AACb,OAAO,MAAMC,WAAW,GAAG,MAAML,WAAW,EAArC;MAAMK,W;AACb,OAAO,MAAMC,WAAW,GAAG,MAAML,WAAW,EAArC;AAEP;;MAFaK,W;AAGb,OAAO,MAAMC,WAAW,GAAIC,EAAD,IAAQL,WAAW,CAACK,EAAD,CAAvC;AAEP;;MAFaD,W;AAGb,OAAO,MAAME,eAAe,GAAG,CAACC,KAAD,EAAOF,EAAP,KAC/B;AACI,SAAOE,KAAK,CAACC,MAAN,CAAcC,IAAD,IAAUA,IAAI,CAACC,MAAL,IAAeL,EAAtC,CAAP;AACH,CAHM;AAKP;;MALaC,e;AAMb,OAAO,MAAMK,eAAe,GAAI,CAACC,KAAD,EAAOP,EAAP,KAChC;AACI,SAAQO,KAAK,CAACJ,MAAN,CAAcK,IAAD,IAAUA,IAAI,CAACH,MAAL,IAAeL,EAAtC,CAAR;AACH,CAHM;AAKP;;MALaM,e;AAMb,OAAO,MAAMG,WAAW,GAAI,CAACC,UAAD,EAAYC,MAAZ,KAC5B;AACI,SAAOD,UAAU,CAACP,MAAX,CAAmBS,IAAD,IAAYA,IAAI,CAACC,IAAL,CAAUC,QAAV,CAAmBH,MAAnB,KAA8BC,IAAI,CAACG,KAAL,CAAWD,QAAX,CAAoBH,MAApB,CAA5D,CAAP;AACH,CAHM;AAIP;;AACA,OAAO,MAAMK,WAAW,GAAG,CAACN,UAAD,EAAYV,EAAZ,KAC3B;AACI,QAAMY,IAAI,GAAGF,UAAU,CAACO,IAAX,CAAiBL,IAAD,IAAUA,IAAI,CAACZ,EAAL,IAAWA,EAArC,CAAb;AAEA,SAAO;AACHkB,IAAAA,MAAM,EAACN,IAAI,CAACO,OAAL,CAAaD,MADjB;AAEHE,IAAAA,IAAI,EAACR,IAAI,CAACO,OAAL,CAAaC,IAFf;AAGHC,IAAAA,GAAG,EAACT,IAAI,CAACO,OAAL,CAAaG;AAHd,GAAP;AAKH,CATM;AAWP;;MAXaN,W;AAYb,OAAO,MAAMO,UAAU,GAAG,CAACb,UAAD,EAAYc,OAAZ,KAC1B;AACI;AACA,QAAMC,SAAS,GAAGC,aAAa,CAAChB,UAAD,EAAYc,OAAO,CAACxB,EAApB,CAA/B;AACAU,EAAAA,UAAU,CAACe,SAAD,CAAV,GAAwBD,OAAxB;AAAiC;;AAEjC,SAAOd,UAAP;AACH,CAPM;AASP;;MATaa,U;AAUb,OAAO,MAAMG,aAAa,GAAG,CAAChB,UAAD,EAAYV,EAAZ,KAC7B;AACI,SAAOU,UAAU,CAACiB,SAAX,CAAsBf,IAAD,IAASA,IAAI,CAACZ,EAAL,IAASA,EAAvC,CAAP;AACH,CAHM;AAKP;;MALa0B,a;AAMb,OAAO,MAAME,UAAU,GAAG,CAAC5B,EAAD,EAAIE,KAAJ,KAC1B;AACI,QAAM2B,SAAS,GAAG5B,eAAe,CAACC,KAAD,EAAOF,EAAP,CAAjC;AAEA,SAAO6B,SAAS,CAACC,KAAV,CAAiB1B,IAAD,IAAUA,IAAI,CAAC2B,SAA/B,CAAP;AACH,CALM;AAOP;;OAPaH,U;AAQb,OAAO,MAAMI,UAAU,GAAG,CAACC,KAAD,EAAOC,MAAP,KAC1B;AACID,EAAAA,KAAK,CAACE,IAAN,CAAWD,MAAX;AACA,SAAOD,KAAP;AACH,CAJM;AAMP;;OANaD,U;AAOb,OAAO,MAAMI,OAAO,GAAG,CAACH,KAAD,EAAOC,MAAP,KACvB;AACIA,EAAAA,MAAM,CAAClC,EAAP,GAAYiC,KAAK,CAACA,KAAK,CAACI,MAAN,GAAa,CAAd,CAAL,CAAsBrC,EAAtB,GAA2B,CAAvC;AAA0C;;AAE1C,SAAOgC,UAAU,CAACC,KAAD,EAAOC,MAAP,CAAjB;AACH,CALM;AAOP;;OAPaE,O;AAQb,OAAO,MAAME,eAAe,GAAG,CAACL,KAAD,EAAOM,KAAP,KAC/B;AACI,QAAMC,QAAQ,GAAGd,aAAa,CAACO,KAAD,EAAOM,KAAP,CAA9B;AACAN,EAAAA,KAAK,CAACQ,MAAN,CAAaD,QAAb,EAAsB,CAAtB;AAEA,SAAOP,KAAP;AACH,CANM;AAQP;;OARaK,e;AASb,OAAO,MAAMI,gBAAgB,GAAG,CAACC,UAAD,EAAYC,MAAZ,KAChC;AACI,QAAMxC,IAAI,GAAGuC,UAAU,CAAChB,SAAX,CAAsBvB,IAAD,IAAUA,IAAI,CAACJ,EAAL,IAAS4C,MAAxC,CAAb;AACAD,EAAAA,UAAU,CAACvC,IAAD,CAAV,CAAiB2B,SAAjB,GAA6B,IAA7B;AAEA,SAAOY,UAAP;AACH,CANM;OAAMD,gB","sourcesContent":["import { getAllPosts } from \"./DALS/postsDAL\";\r\nimport { getAllTodos } from \"./DALS/todosDAL\";\r\nimport { getAllUsers, getUserByID} from \"./DALS/usersDAL\"\r\n\r\n/* Get All Functions */\r\nexport const GetAllUsers = () => getAllUsers();\r\nexport const GetAllPosts = () => getAllPosts();\r\nexport const GetAllTodos = () => getAllTodos();\r\n\r\n/* Getss the user by Id object */\r\nexport const GetUserById = (id) => getUserByID(id);\r\n\r\n/* Gets All Todos of the id*/\r\nexport const GetAllTodosById = (todos,id) => \r\n{\r\n    return todos.filter((todo) => todo.userId == id);\r\n}\r\n\r\n/* Gets All Posts of the id*/\r\nexport const GetAllPostsById =  (posts,id) =>\r\n{\r\n    return  posts.filter((post) => post.userId == id);\r\n}\r\n\r\n/* return Array with users that the user/email contain the string */\r\nexport const searchUsers =  (usersArray,string) =>\r\n{\r\n    return usersArray.filter((user) =>  (user.name.includes(string) || user.email.includes(string)));\r\n}\r\n/* Finds the user by id and return address object */\r\nexport const GetUserData = (usersArray,id) =>\r\n{\r\n    const user = usersArray.find((user) => user.id == id);\r\n\r\n    return {\r\n        street:user.address.street,\r\n        city:user.address.city,\r\n        zip:user.address.zipcode\r\n    }\r\n}\r\n\r\n/* Updating user */\r\nexport const UpdateUser = (usersArray,newUser) =>\r\n{\r\n    /* Finds the user index */\r\n    const userIndex = FindUserIndex(usersArray,newUser.id);\r\n    usersArray[userIndex] = newUser; /* replacing the old user with the new */\r\n\r\n    return usersArray;\r\n}\r\n\r\n/* Function that get Array and id and finds the index of the user in the array*/\r\nexport const FindUserIndex = (usersArray,id) =>\r\n{\r\n    return usersArray.findIndex((user)=> user.id==id);\r\n}\r\n\r\n/* Checks if All the Tasks Are Completed return true if does*/\r\nexport const CheckTodos = (id,todos) =>\r\n{\r\n    const todosUser = GetAllTodosById(todos,id);\r\n\r\n    return todosUser.every((todo) => todo.completed);\r\n}\r\n\r\n/* Basic Function Which adds to array new Object */\r\nexport const AddtoArray = (array,newObj) =>\r\n{\r\n    array.push(newObj)\r\n    return array;\r\n}\r\n\r\n/* Adds new User to the Array */\r\nexport const AddUser = (array,newObj) =>\r\n{\r\n    newObj.id = array[array.length-1].id + 1; /* The new User Gets the id of the last id user +1 */\r\n    \r\n    return AddtoArray(array,newObj)\r\n}\r\n\r\n/* Basic Funtion which Removes Object from array */\r\nexport const RemoveFromArray = (array,idObj) =>\r\n{\r\n    const objIndex = FindUserIndex(array,idObj);\r\n    array.splice(objIndex,1);\r\n\r\n    return array;\r\n}\r\n\r\n/* Mark the Task by id as Completed */\r\nexport const MarkTaskComplete = (todosArray,idTask) =>\r\n{\r\n    const todo = todosArray.findIndex((todo) => todo.id==idTask);\r\n    todosArray[todo].completed = true;\r\n\r\n    return todosArray;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}